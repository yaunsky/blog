<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记一次云上安全攻防</title>
    <link href="/2023/04/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BA%91%E4%B8%8A%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2/"/>
    <url>/2023/04/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BA%91%E4%B8%8A%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2/</url>
    
    <content type="html"><![CDATA[<p>记录一次云上攻防过程，整个过程除了资产收集不是那么的复杂，浅浅的和大家分享下。（注：没有漏洞讲解，纯纯的攻击过程）</p><h3 id="资产收集"><a href="#资产收集" class="headerlink" title="资产收集"></a>资产收集</h3><p>通过资产收集，确定此次攻击目标，资产收集手段：备案、子域名、搜索引擎的使用等等；最终确定攻击目标：某集团的某工牌系统</p><p>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221223101938.png]]</p><h3 id="打点"><a href="#打点" class="headerlink" title="打点"></a>打点</h3><p>该系统下未发现漏洞，于是渗透三板斧，扫描目录、扫描端口。发现端口7099<br>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221223102127.png]]<br>尝试爆破登录后，未果。<br>但是通过burpsuite的被动扫描工具发现了fastjson漏洞<br>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221223102306.png]]</p><p>使用vps搭建反弹shell的环境<br>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221223102520.png]]</p><p>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221223102450.png]]<br>获得shell<br>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221221115827.png]]</p><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>本着不被发现的态度，没做代理、没做内网扫描，先进行信息搜集。<br>内网主机上信息搜集重点关注下历史命令；配置文件，如.ssh、etc；敏感文件，如用户根目录下的隐藏文件（很多服务的配置会默认生成在用户目录下）。<br>一顿乱七八糟的信息搜集，于用户根目录下发现重要文件ossutilconfig<br>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221223103511.png]]<br>该文件是访问oss存储的配置文件。这里如果运维师傅使用的是具备管理权限ak的值的话，就会导致被攻击者接管整个控制台。</p><h3 id="接管整个云环境"><a href="#接管整个云环境" class="headerlink" title="接管整个云环境"></a>接管整个云环境</h3><p>推荐使用teamssix师傅的工具cf，工具链接：<a href="https://github.com/teamssix/cf">https://github.com/teamssix/cf</a></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">cf <span class="hljs-built_in">config</span> <span class="hljs-comment">#配置ak</span><br></code></pre></td></tr></table></figure><p>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221223103849.png]]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cf alibaba <span class="hljs-built_in">ls</span> <span class="hljs-comment">#一键列出当前凭证下的 OSS、ECS、RDS </span><br></code></pre></td></tr></table></figure><p>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221221120249.png]]<br>该ak管理的资产确实不少，看一下当前凭证的权限</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">cf</span> alibaba perm  <span class="hljs-comment">#列出当前凭证下所拥有的权限</span><br></code></pre></td></tr></table></figure><p>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221221120527.png]]<br>如图所示，具备管理所有阿里云资源的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cf alibaba ecs <span class="hljs-built_in">ls</span> <span class="hljs-comment">#列出所有的实例</span><br></code></pre></td></tr></table></figure><p>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221223104224.png]]<br>上百台云服务器</p><p>通过命令行不太直观，接管控制台登录阿里云看一下</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">cf alibaba <span class="hljs-built_in">console</span><br></code></pre></td></tr></table></figure><p>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221223104253.png]]<br>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221223104339.png]]</p><h3 id="整理成果"><a href="#整理成果" class="headerlink" title="整理成果"></a>整理成果</h3><p>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221221123755.png]]<br>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221221123818.png]]<br>![[Md-png&#x2F;云安全&#x2F;Pasted image 20221221123834.png]]</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>造成以上问题原因有如下：</p><ol><li>遗留历史漏洞fastjson反序列化，导致被getshell</li><li>服务器中存在具备阿里云管理员权限的用户ak。在配置每个用户凭证的时候最好限制用户权限，如当前环境只需要具备访问oss云存储内容权限即可。限制了用户权限，不至于轻易被接管整个云</li></ol><p>发现被getshell的实例属于k8s集群中的node3节点。（已接管云，未做更多研究）</p><p>传统的内网攻击以获得域控域管权限为最终目标；云原生K8S以获得APIServer的token为最终目标；云服务的话个人认为以获得云控制台控制权限或者获取具备管理权的凭证为最终目标。</p><p>此次使用ak是通过服务器中的敏感文件获得，此外还可能在app、小程序、公众号、网站的js等等中获得。</p>]]></content>
    
    
    
    <tags>
      
      <tag>云服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/17/hello-world/"/>
    <url>/2023/04/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
